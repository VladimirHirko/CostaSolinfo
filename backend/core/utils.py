from rest_framework import serializers
from modeltranslation.utils import get_translation_fields
from django.core.mail import EmailMultiAlternatives, send_mail
from django.template.loader import render_to_string

from django.conf import settings
from django.urls import reverse
from .models import TransferNotification
# from .email_utils import send_html_email  # –∏–ª–∏ –æ—Ç–∫—É–¥–∞ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è send_html_email

# ‚¨áÔ∏è –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–º –ø–∏—Å–µ–º
from django.utils.translation import gettext as _


class BaseTranslationSerializer(serializers.ModelSerializer):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥—ã.
    –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –ø–æ–ª—è –≤—Ä–æ–¥–µ '_', 'a', 'l'.
    """
    translatable_fields = []
    extra_fields = []

    class Meta:
        model = None
        fields = []

    def __new__(cls, *args, **kwargs):
        # –í—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏
        valid_fields = {f.name for f in cls.Meta.model._meta.get_fields()} if cls.Meta.model else set()

        translated_fields = []
        if cls.Meta.model and hasattr(cls, 'translatable_fields'):
            for field in cls.translatable_fields:
                candidates = get_translation_fields(field)
                filtered = [f for f in candidates if f in valid_fields]
                translated_fields.extend(filtered)

        meta_extra = getattr(cls.Meta, 'extra_fields', [])
        extra_fields_clean = [f for f in meta_extra if f in valid_fields]

        # –ò—Ç–æ–≥: —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è
        cls.Meta.fields = list(set(translated_fields + extra_fields_clean))

        print(f"[DEBUG CLEAN] –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {cls.Meta.fields}")

        return super().__new__(cls)




# üîπ –¢–µ–º—ã –ø–∏—Å–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É –∏ —è–∑—ã–∫—É
def get_email_subject(template_name, lang):
    subjects = {
        'transfer_notification': {
            'ru': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ',
            'en': 'Transfer Information',
            'es': 'Informaci√≥n sobre su traslado',
            'lv': 'InformƒÅcija par j≈´su transfƒìru',
            'lt': 'Informacija apie j≈´s≈≥ perve≈æimƒÖ',
            'et': 'Teave teie transfeeri kohta',
            'uk': '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä',
        },
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–∏—Å–µ–º
    }

    key = template_name.replace('emails/', '').replace('.html', '').replace(f'_{lang}', '')
    return subjects.get(key, {}).get(lang, subjects.get(key, {}).get('en', 'CostaSolinfo Notification'))


# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML-–ø–∏—Å—å–º–∞
def send_html_email(subject, to_email, template_name, context, lang='en'):
    subject = get_email_subject(template_name, lang)
    html_content = render_to_string(template_name, context)

    email = EmailMultiAlternatives(
        subject=subject,
        body="–≠—Ç–æ HTML –ø–∏—Å—å–º–æ. –í–∫–ª—é—á–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML –≤ –≤–∞—à–µ–º –∫–ª–∏–µ–Ω—Ç–µ.",
        from_email="CostaSolinfo.Malaga@gmail.com",
        to=[to_email],
    )
    email.attach_alternative(html_content, "text/html")
    email.send()

def send_transfer_update_email(notification: TransferNotification):
    path = reverse('transfer_confirm', kwargs={"token": notification.confirmation_token})
    confirmation_link = f"{settings.SITE_URL}/api/transfer-confirm/{notification.confirmation_token}/"

    print("[DEBUG] –°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", confirmation_link)

    context = {
        'hotel_name': notification.hotel.name,
        'departure_date': notification.departure_date.strftime("%d.%m.%Y"),
        'new_time': notification.departure_time.strftime("%H:%M"),
        'pickup_point': notification.pickup_point.name if notification.pickup_point else None,
        'map_link': notification.map_link,
        'confirmation_link': confirmation_link,
    }

    send_html_email(
        subject="–í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ",
        template="emails/transfer_notification_ru.html",
        context=context,
        to=[notification.email]
    )


def send_question_notification(question, lang_code=None):
    subject = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {question.name}"
    recipient = getattr(settings, "QUESTION_NOTIFICATION_EMAIL", "costasolinfo.malaga@gmail.com")

    # –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî –±–µ—Ä—ë–º –∏–∑ –º–æ–¥–µ–ª–∏
    if not lang_code:
        lang_code = getattr(question, "language", "ru")

    # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–Ω–æ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
    question_text = getattr(question, f"question_{lang_code}", None) or question.question

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∏ HTML –≤–µ—Ä—Å–∏–∏
    context = {"question": question, "lang_code": lang_code, "question_text": question_text}
    message_text = (
        f"–ò–º—è: {question.name}\n"
        f"Email: {question.email}\n"
        f"–û—Ç–µ–ª—å: {question.hotel or '-'}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question.get_category_display()}\n"
        f"–Ø–∑—ã–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è: {lang_code}\n\n"
        f"–í–æ–ø—Ä–æ—Å:\n{question_text}"
    )
    message_html = render_to_string("emails/question_notification.html", context)

    msg = EmailMultiAlternatives(subject, message_text, settings.DEFAULT_FROM_EMAIL, [recipient])
    msg.attach_alternative(message_html, "text/html")
    msg.send()


