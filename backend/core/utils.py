from rest_framework import serializers
from modeltranslation.utils import get_translation_fields
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string

# ‚¨áÔ∏è –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–º –ø–∏—Å–µ–º
from django.utils.translation import gettext as _


class BaseTranslationSerializer(serializers.ModelSerializer):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π.
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        class HomepageSerializer(BaseTranslationSerializer):
            translatable_fields = ['title', 'subtitle']
    """
    translatable_fields = []

    class Meta:
        model = None
        fields = []  # –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ __new__

    def __new__(cls, *args, **kwargs):
        cls.Meta.fields = []
        if cls.Meta.model and hasattr(cls, 'translatable_fields'):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            translated_fields = []
            for field in cls.translatable_fields:
                translated_fields += get_translation_fields(field)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            cls.Meta.fields = translated_fields + getattr(cls.Meta, 'extra_fields', [])
        return super().__new__(cls)


# üîπ –¢–µ–º—ã –ø–∏—Å–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É –∏ —è–∑—ã–∫—É
def get_email_subject(template_name, lang):
    subjects = {
        'transfer_notification': {
            'ru': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ',
            'en': 'Transfer Information',
            'es': 'Informaci√≥n sobre su traslado',
            'lv': 'InformƒÅcija par j≈´su transfƒìru',
            'lt': 'Informacija apie j≈´s≈≥ perve≈æimƒÖ',
            'et': 'Teave teie transfeeri kohta',
            'uk': '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä',
        },
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–∏—Å–µ–º
    }

    key = template_name.replace('emails/', '').replace('.html', '').replace(f'_{lang}', '')
    return subjects.get(key, {}).get(lang, subjects.get(key, {}).get('en', 'CostaSolinfo Notification'))


# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML-–ø–∏—Å—å–º–∞
def send_html_email(subject, to_email, template_name, context, lang='en'):
    subject = get_email_subject(template_name, lang)
    html_content = render_to_string(template_name, context)

    email = EmailMultiAlternatives(
        subject=subject,
        body="–≠—Ç–æ HTML –ø–∏—Å—å–º–æ. –í–∫–ª—é—á–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML –≤ –≤–∞—à–µ–º –∫–ª–∏–µ–Ω—Ç–µ.",
        from_email="CostaSolinfo.Malaga@gmail.com",
        to=[to_email],
    )
    email.attach_alternative(html_content, "text/html")
    email.send()
