import uuid
from django.db import models

from django.utils.translation import gettext_lazy as _
from django.conf import settings
from ckeditor.fields import RichTextField
from django.contrib.gis.db import models as geomodels

TRANSFER_TYPE_CHOICES = [
        ('group', '–ì—Ä—É–ø–ø–æ–≤–æ–π'),
        ('private', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'),
    ]


# –ú–æ–¥–µ–ª—å –±–∞–Ω–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ
class PageBanner(models.Model):
    PAGE_CHOICES = [
        ('home', '–ì–ª–∞–≤–Ω–∞—è'),
        ('excursions', '–≠–∫—Å–∫—É—Ä—Å–∏–∏'),
        ('info_meeting', '–ò–Ω—Ñ–æ –≤—Å—Ç—Ä–µ—á–∞'),
        ('airport_transfer', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç'),
        ('ask', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'),
        ('contacts', '–ö–æ–Ω—Ç–∞–∫—Ç—ã'),
        ('about', '–û –Ω–∞—Å'),
        ('group_transfer', '–ì—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä'),  # üü¢ –î–û–ë–ê–í–¨ –≠–¢–û
    ]

    page = models.CharField(max_length=50, choices=PAGE_CHOICES, unique=True)
    image = models.ImageField(upload_to='uploads/banners/')
    title_ru = models.CharField(max_length=200, blank=True, null=True)
    title_en = models.CharField(max_length=200, blank=True, null=True)
    title_es = models.CharField(max_length=200, blank=True, null=True)
    title_uk = models.CharField(max_length=200, blank=True, null=True)
    title_et = models.CharField(max_length=200, blank=True, null=True)
    title_lv = models.CharField(max_length=200, blank=True, null=True)
    title_lt = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        verbose_name = "–ë–∞–Ω–Ω–µ—Ä"
        verbose_name_plural = "–ë–∞–Ω–Ω–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü"  # —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ

    def __str__(self):
        return f"–ë–∞–Ω–Ω–µ—Ä –¥–ª—è: {self.page}"

# –ì–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
class Homepage(models.Model):
    title = models.CharField(max_length=255, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    subtitle = models.TextField(verbose_name="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫")
    banner_image = models.ImageField(upload_to='uploads/homepage/', verbose_name="–ë–∞–Ω–Ω–µ—Ä")

    def __str__(self):
        return "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"

    class Meta:
        verbose_name = "–ì–ª–∞–≤–Ω–∞—è"
        verbose_name_plural = "–ì–ª–∞–≤–Ω–∞—è"

# –ò–Ω—Ñ–æ –≤—Å—Ç—Ä–µ—á–∞
class InfoMeeting(models.Model):
    title = models.CharField(max_length=255)
    content = RichTextField(blank=True, null=True)

    location = models.CharField(max_length=255, blank=True)
    date = models.DateField(blank=True, null=True)  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ–±—â–µ–π –¥–∞—Ç—ã
    time = models.TimeField(blank=True, null=True)  # –∏ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    def __str__(self):
        return f"{self.title}"

    class Meta:
        verbose_name = "–ò–Ω—Ñ–æ –≤—Å—Ç—Ä–µ—á–∞"
        verbose_name_plural = "–ò–Ω—Ñ–æ –≤—Å—Ç—Ä–µ—á–∏"


class InfoMeetingScheduleItem(models.Model):
    #meeting = models.ForeignKey(InfoMeeting, on_delete=models.CASCADE, related_name='schedules')
    hotel = models.ForeignKey('core.Hotel', on_delete=models.CASCADE)

    date = models.DateField()
    time_from = models.TimeField()
    time_to = models.TimeField()

    class Meta:
        verbose_name = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ñ–æ –≤—Å—Ç—Ä–µ—á–∏"
        verbose_name_plural = "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ñ–æ –≤—Å—Ç—Ä–µ—á"
        ordering = ['date', 'time_from', 'time_to', 'hotel']

    def __str__(self):
        return f"{self.hotel.name} ‚Äî {self.date} ({self.time_from}‚Äì{self.time_to})"


# –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç 
class AirportTransfer(models.Model):
    description = models.TextField()
    pickup_location = models.CharField(max_length=255, blank=True)  # –Ω–æ–≤–æ–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–µ –ø–æ–ª–µ
    departure_date = models.DateField(blank=True, null=True)
    departure_time = models.TimeField(blank=True, null=True)        # –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏
    contact_email = models.EmailField()

    def __str__(self):
        return f"Airport Transfer Info"

    class Meta:
        verbose_name = "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç"
        verbose_name_plural = "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç"

# –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –æ—Ç–µ–ª—è–º
class TransferSchedule(models.Model):
    transfer_type = models.CharField(
        max_length=10,
        choices=TRANSFER_TYPE_CHOICES,
        verbose_name="–¢–∏–ø —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞"
    )
    hotel = models.ForeignKey('Hotel', on_delete=models.CASCADE, verbose_name="–û—Ç–µ–ª—å")
    departure_date = models.DateField(verbose_name="–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞")
    departure_time = models.TimeField(verbose_name="–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞")
    pickup_point = models.ForeignKey('PickupPoint', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞")
    passenger_last_name = models.CharField(max_length=100, blank=True, verbose_name="–§–∞–º–∏–ª–∏—è —Ç—É—Ä–∏—Å—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")
    group = models.ForeignKey(
        'TransferScheduleGroup',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='schedules',
        verbose_name="–ì—Ä—É–ø–ø–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞"
    )

    def save(self, *args, **kwargs):
        if self.hotel and not self.pickup_point:
            self.pickup_point = self.hotel.pickup_point
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.get_transfer_type_display()} | {self.hotel.name} | {self.departure_date}"

    class Meta:
        verbose_name = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞"
        verbose_name_plural = "–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤"
        ordering = ['departure_date', 'departure_time']

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TransferScheduleGroup(models.Model):
    date = models.DateField(verbose_name="–î–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞")
    transfer_type = models.CharField(
        max_length=10,
        choices=TRANSFER_TYPE_CHOICES,
        verbose_name="–¢–∏–ø —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞"
    )

    def __str__(self):
        return f"{self.get_transfer_type_display()} ‚Äî {self.date}"

# –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ TransferNotification
class TransferNotification(models.Model):
    email = models.EmailField(verbose_name=_("Email"))
    transfer_type = models.CharField(
        max_length=10,
        choices=[('group', _("Group")), ('private', _("Private"))],
        verbose_name=_("Transfer Type")
    )
    hotel = models.ForeignKey('Hotel', on_delete=models.CASCADE, verbose_name=_("Hotel"))
    departure_date = models.DateField(verbose_name=_("Departure Date"))
    language = models.CharField(
        max_length=10,
        choices=settings.LANGUAGES,
        default='ru',
        verbose_name=_("Language")
    )
    created_at = models.DateTimeField(auto_now_add=True)
    departure_time_sent = models.TimeField(
        null=True, blank=True,
        verbose_name=_("Sent Departure Time")
    )
    last_name = models.CharField(max_length=100, blank=True, null=True)

    is_changed = models.BooleanField(default=False, verbose_name="–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑–º–µ–Ω–µ–Ω")
    is_confirmed = models.BooleanField(default=False, verbose_name="–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ")
    confirmation_token = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)

    class Meta:
        verbose_name = _("Transfer Notification")
        verbose_name_plural = _("Transfer Notifications")

    def __str__(self):
        return f"{self.email} ({self.hotel}) {self.departure_date} [{self.transfer_type}]"

# –ú–æ–¥–µ–ª—å –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
class TransferChangeLog(models.Model):
    schedule = models.ForeignKey(TransferSchedule, on_delete=models.CASCADE)
    hotel_name = models.CharField(max_length=255)
    date = models.DateField()
    old_time = models.TimeField()
    new_time = models.TimeField()
    changed_by = models.CharField(max_length=150)
    changed_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.hotel_name} | {self.date} | {self.old_time} ‚Üí {self.new_time}"
 



# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
class Question(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Question from {self.name}"

    class Meta:
        verbose_name = "–í–æ–ø—Ä–æ—Å"
        verbose_name_plural = "–í–æ–ø—Ä–æ—Å—ã"

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
class ContactInfo(models.Model):
    office_name = models.CharField(max_length=100)
    email = models.EmailField()
    phone = models.CharField(max_length=50)
    whatsapp = models.CharField(max_length=50, blank=True)
    address = models.TextField()

    def __str__(self):
        return self.office_name

    class Meta:
        verbose_name = "–ö–æ–Ω—Ç–∞–∫—Ç"
        verbose_name_plural = "–ö–æ–Ω—Ç–∞–∫—Ç—ã"

# –û –Ω–∞—Å
class AboutUs(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    photo = models.ImageField(upload_to='about/', blank=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–û –Ω–∞—Å"
        verbose_name_plural = "–û –Ω–∞—Å"

# –†–µ–≥–∏–æ–Ω—ã
class Region(models.Model):
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–†–µ–≥–∏–æ–Ω"
        verbose_name_plural = "–†–µ–≥–∏–æ–Ω—ã"

# –û—Ç–µ–ª–∏
class Hotel(models.Model):
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è")
    address = models.TextField(blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å")
    latitude = models.FloatField(blank=True, null=True, verbose_name="–®–∏—Ä–æ—Ç–∞")
    longitude = models.FloatField(blank=True, null=True, verbose_name="–î–æ–ª–≥–æ—Ç–∞")
    region = models.ForeignKey('Region', on_delete=models.SET_NULL, null=True, blank=True, related_name='hotels')

    pickup_point = models.ForeignKey(
        'PickupPoint',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='related_hotel',  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
        verbose_name="–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞"
    )

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['name']  # –ø–æ –∏–º–µ–Ω–∏
        verbose_name = "–û—Ç–µ–ª—å"
        verbose_name_plural = "–û—Ç–µ–ª–∏"

class TransferScheduleItem(models.Model):
    group = models.ForeignKey('TransferScheduleGroup', on_delete=models.CASCADE)
    hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE)
    time = models.TimeField()
    pickup_point = models.CharField(max_length=255, blank=True)
    tourist_last_name = models.CharField(max_length=100, blank=True)

# –ú–æ–¥–µ–ª—å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –µ—Å–ª–∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ
class TransferInquiry(models.Model):
    last_name = models.CharField(max_length=100)
    hotel = models.ForeignKey(Hotel, on_delete=models.SET_NULL, null=True)
    departure_date = models.DateField()
    flight_number = models.CharField(max_length=50, blank=True)
    message = models.TextField(blank=True)
    email = models.EmailField()
    created_at = models.DateTimeField(auto_now_add=True)
    language = models.CharField(max_length=10, default='ru')

    # –ù–æ–≤–æ–µ –ø–æ–ª–µ:
    reply = models.TextField(blank=True, verbose_name="–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞")

    # –º–µ—Ç–∫–∞ ‚Äî –±—ã–ª–æ –ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    replied = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.last_name} ‚Äî {self.departure_date}"

# –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Å–∏–µ–º –ø–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–º.
class TransferInquiryLog(models.Model):
    inquiry = models.ForeignKey(TransferInquiry, on_delete=models.CASCADE, related_name='logs')
    email = models.EmailField()
    reply_content = models.TextField()
    sent_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Log for {self.email} at {self.sent_at.strftime('%Y-%m-%d %H:%M')}"



# –ú–æ–¥–µ–ª—å —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞ 
class PickupPoint(models.Model):
    TRANSFER_TYPE_CHOICES = [
        ('group', '–ì—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä'),
        ('private', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä'),
    ]

    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞")
    location_description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ/–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ")
    latitude = models.FloatField(verbose_name="–®–∏—Ä–æ—Ç–∞")
    longitude = models.FloatField(verbose_name="–î–æ–ª–≥–æ—Ç–∞")
    region = models.CharField(max_length=100, verbose_name="–†–µ–≥–∏–æ–Ω")

    hotel = models.ForeignKey(  # üü¢ –†–ê–ó–†–ï–®–ê–ï–¢ –ú–ù–û–ì–û –¢–û–ß–ï–ö –ù–ê 1 –û–¢–ï–õ–¨
        'Hotel',
        on_delete=models.CASCADE,
        verbose_name="–û—Ç–µ–ª—å",
        related_name='pickup_points',  # üîÅ —Ç–µ–ø–µ—Ä—å related_name ‚Äî —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
        null=True,
        blank=True
    )

    transfer_type = models.CharField(
        max_length=10,
        choices=TRANSFER_TYPE_CHOICES,
        default='group',
        verbose_name="–¢–∏–ø —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞"
    )

    def __str__(self):
        return f"{self.name} ({self.get_transfer_type_display()})"

    class Meta:
        verbose_name = "–¢–æ—á–∫–∏ —Å–±–æ—Ä–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤"
        verbose_name_plural = "–¢–æ—á–∫–∏ —Å–±–æ—Ä–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤"

# –ú–æ–¥–µ–ª—å –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
class GroupTransferPickupPoint(PickupPoint):
    class Meta:
        proxy = True
        verbose_name = "–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ (–ì—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä)"
        verbose_name_plural = "–¢–æ—á–∫–∏ —Å–±–æ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞"

# –ú–æ–¥–µ–ª—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
class PrivateTransferPickupPoint(PickupPoint):
    class Meta:
        proxy = True
        verbose_name = "–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ (–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä)"
        verbose_name_plural = "–¢–æ—á–∫–∏ —Å–±–æ—Ä–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞"



# –≠–∫—Å–∫—É—Ä—Å–∏–∏
class Excursion(models.Model):
    DAYS_OF_WEEK = [
        ('mon', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'),
        ('tue', '–í—Ç–æ—Ä–Ω–∏–∫'),
        ('wed', '–°—Ä–µ–¥–∞'),
        ('thu', '–ß–µ—Ç–≤–µ—Ä–≥'),
        ('fri', '–ü—è—Ç–Ω–∏—Ü–∞'),
        ('sat', '–°—É–±–±–æ—Ç–∞'),
        ('sun', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'),
    ]

    DIRECTION_CHOICES = [
        ('MALAGA_TO_GIB', '–û—Ç –ú–∞–ª–∞–≥–∏ –∫ –ì–∏–±—Ä–∞–ª—Ç–∞—Ä—É'),
        ('GIB_TO_MALAGA', '–û—Ç –ì–∏–±—Ä–∞–ª—Ç–∞—Ä–∞ –∫ –ú–∞–ª–∞–≥–µ'),
    ]
    direction = models.CharField(
        max_length=20,
        choices=DIRECTION_CHOICES,
        default='MALAGA_TO_GIB',
        verbose_name="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"
    )

    title = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    
    duration = models.PositiveIntegerField(verbose_name="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)")
    image = models.ImageField(upload_to='excursions/', blank=True, null=True, verbose_name="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    days = models.JSONField(verbose_name="–î–Ω–∏ –Ω–µ–¥–µ–ª–∏", help_text="–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π: mon, tue –∏ —Ç.–¥.")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–≠–∫—Å–∫—É—Ä—Å–∏—è"
        verbose_name_plural = "–≠–∫—Å–∫—É—Ä—Å–∏–∏"

class ExcursionRegionPrice(models.Model):
    excursion = models.ForeignKey(
        Excursion,
        on_delete=models.CASCADE,
        related_name="region_prices",
        verbose_name="–≠–∫—Å–∫—É—Ä—Å–∏—è"
    )
    region = models.ForeignKey(
        Region,
        on_delete=models.CASCADE,
        verbose_name="–†–µ–≥–∏–æ–Ω"
    )
    price_adult = models.DecimalField(max_digits=8, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –≤–∑—Ä–æ—Å–ª—ã–π")
    price_child = models.DecimalField(max_digits=8, decimal_places=2, verbose_name="–¶–µ–Ω–∞ —Ä–µ–±—ë–Ω–æ–∫")

    class Meta:
        unique_together = ('excursion', 'region')
        verbose_name = "–¶–µ–Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"
        verbose_name_plural = "–¶–µ–Ω—ã —ç–∫—Å–∫—É—Ä—Å–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"

    def __str__(self):
        return f"{self.excursion.title} - {self.region.name}"


class ExcursionPickupPoint(models.Model):
    excursion = models.ForeignKey('Excursion', on_delete=models.CASCADE)
    hotel = models.ForeignKey('Hotel', on_delete=models.CASCADE)
    pickup_point_name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞")
    pickup_time = models.TimeField(verbose_name="–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    latitude = models.DecimalField(max_digits=9, decimal_places=6, verbose_name="–®–∏—Ä–æ—Ç–∞")
    longitude = models.DecimalField(max_digits=9, decimal_places=6, verbose_name="–î–æ–ª–≥–æ—Ç–∞")

    @property
    def direction(self):
        return self.excursion.direction

    @property
    def price_adult(self):
        region = self.hotel.region
        if not region:
            return None
        price = self.excursion.region_prices.filter(region=region).first()
        return price.price_adult if price else None

    @property
    def price_child(self):
        region = self.hotel.region
        if not region:
            return None
        price = self.excursion.region_prices.filter(region=region).first()
        return price.price_child if price else None

    class Meta:
        unique_together = ('excursion', 'hotel')
        verbose_name = "–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏"
        verbose_name_plural = "–¢–æ—á–∫–∏ —Å–±–æ—Ä–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π"

class ExcursionContentBlock(models.Model):
    BLOCK_TYPES = [
        ('description', '–û–ø–∏—Å–∞–Ω–∏–µ'),
        ('rules', '–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è'),
        ('what_to_bring', '–ß—Ç–æ –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ'),
        ('custom', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ'),
    ]

    excursion = models.ForeignKey(
        'Excursion',
        on_delete=models.CASCADE,
        related_name='content_blocks',
        verbose_name="–≠–∫—Å–∫—É—Ä—Å–∏—è"
    )
    block_type = models.CharField(max_length=50, choices=BLOCK_TYPES, default='custom', verbose_name="–¢–∏–ø –±–ª–æ–∫–∞")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    title = models.CharField(max_length=200, blank=True, null=True, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    content = RichTextField(blank=True, null=True, verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")


    def __str__(self):
        return f"{self.excursion.title} ‚Äî {self.get_block_type_display()}"

    class Meta:
        verbose_name = "–ë–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏"
        verbose_name_plural = "–ë–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π"
        ordering = ['order']







# –ú–æ–¥–µ–ª—å –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
from django.db import models

class PrivacyPolicy(models.Model):
    LANGUAGE_CHOICES = [
        ('ru', '–†—É—Å—Å–∫–∏–π'),
        ('en', 'English'),
        ('es', 'Espa√±ol'),
        ('lt', 'Lietuvi≈≥'),
        ('lv', 'Latvie≈°u'),
        ('et', 'Eesti'),
        ('uk', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'),
    ]

    language_code = models.CharField(max_length=5, choices=LANGUAGE_CHOICES, unique=True)
    content = RichTextField(verbose_name='–¢–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏')

    def __str__(self):
        return f"–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ({self.get_language_code_display()})"

